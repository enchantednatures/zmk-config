/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define HYP LS(LC(LA(LGUI)))

&mt {
    tapping-term-ms = <175>;
    flavor = "tap-preferred";
    retro-tap;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <100>;
};

/ {
    combos {
        compatible = "zmk,combos";

        toggle_layer {
            bindings = <&tog 5>;
            key-positions = <14 15 16>;
        };

        toggle_rhl {
            bindings = <&tog 6>;
            key-positions = <19 20 21>;
        };

        jk_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <19 20>;
        };
    };

    macros {
        cs_lambda: cs_lambda {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
            label = "CS_LAMBDA";
        };

        shift_shift: shift_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT &kp LEFT_SHIFT>;
            label = "SHIFT_SHIFT";
        };

        zellij_new_tab: zellij_new_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(G) &kp LC(T) &kp N &kp LC(G)>, <&macro_press>;

            label = "ZELLIJ_NEW_TAB";
        };

        zellij_toggle_floating_pane: zellij_toggle_floating_pane {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(G) &kp LC(P) &kp W &kp LC(G)>, <&macro_press>;

            label = "ZELLIJ_TOGGLE_FLOATING_PANE";
        };

        zellij_next_tab: zellij_next_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(G) &kp LC(T) &kp L &kp LC(G)>, <&macro_press>;

            label = "ZELLIJ_NEXT_TAB";
        };

        zellij_previous_tab: zellij_previous_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(G) &kp LC(T) &kp H &kp LC(G)>, <&macro_press>;

            label = "ZELLIJ_PREVIOUS_TAB";
        };
    };

    behaviors {
        copy_paste: copy_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY_PASTE";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;

            tapping-term-ms = <100>;
        };

        media_controls: media_controls {
            compatible = "zmk,behavior-tap-dance";
            label = "MEDIA_CONTROLS";
            #binding-cells = <0>;
            bindings = <&kp K_PLAY_PAUSE>, <&kp K_NEXT>, <&kp K_BACK>;
        };

        volume_controls: volume_controls {
            compatible = "zmk,behavior-tap-dance";
            label = "VOLUME_CONTROLS";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_DN>, <&kp K_MUTE>;

            tapping-term-ms = <175>;
        };

        win_copy_paste: win_copy_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "WIN_COPY_PASTE";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&kp LC(V)>;

            tapping-term-ms = <100>;
        };

        esc_tab: esc_tab {
            compatible = "zmk,behavior-tap-dance";
            label = "ESC_TAB";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp TAB>;
        };

        open_brace: open_brace {
            compatible = "zmk,behavior-tap-dance";
            label = "OPEN_BRACE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

            tapping-term-ms = <200>;
        };

        open_parenthesis: open_parenthesis {
            compatible = "zmk,behavior-tap-dance";
            label = "OPEN_PARENTHESIS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            tapping-term-ms = <200>;
        };

        open_bracket: open_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "OPEN_BRACKET";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            tapping-term-ms = <200>;
        };

        open_angle_bracket: open_angle_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "OPEN_ANGLE_BRACKET";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;

            tapping-term-ms = <200>;
        };

        retro_layer_qt_ht: retro_layer_qt_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "RETRO_LAYER_QT_HT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            retro-tap;
        };

        retro_mod_qt_ht: retro_mod_qt_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "RETRO_MOD_QT_HT";
            bindings = <&mt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            retro-tap;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&win_copy_paste  &mt LA(LS(LEFT_GUI)) Q  &mt LC(LS(LEFT_GUI)) W  &mt LS(LA(LC(LEFT_GUI))) E  &mt LC(LS(LEFT_ALT)) R  &kp T                     &kp Y                           &mt LC(LS(RIGHT_ALT)) U  &mt LS(LA(LC(RIGHT_GUI))) I  &mt LC(LS(RIGHT_GUI)) O   &mt LA(LS(RIGHT_GUI)) P  &kp LCTRL
&esc_tab         &mt LEFT_ALT A          &mt LEFT_CONTROL S      &mt LEFT_GUI D              &mt LEFT_SHIFT F        &mt LS(LA(LC(LGUI))) G    &mt RA(RC(RG(RIGHT_SHIFT))) H   &mt RIGHT_SHIFT J        &mt RIGHT_GUI K              &mt LCTRL L               &mt LALT SEMICOLON       &kp LEFT_ALT
&kp LEFT_SHIFT   &mt LA(LEFT_GUI) Z      &mt LC(LEFT_GUI) X      &mt LA(LC(LEFT_GUI)) C      &mt LC(LEFT_ALT) V      &kp B                     &kp N                           &mt LC(RIGHT_ALT) M      &mt LA(LC(RIGHT_GUI)) COMMA  &mt LC(RIGHT_GUI) PERIOD  &mt LA(RIGHT_GUI) SLASH  &kp LGUI
                                                                 &mt LGUI TAB                &mt LSHIFT RET          &lt 1 SPACE               &retro_layer_qt_ht 2 BACKSPACE  &mo 3                    &mt RIGHT_CONTROL DELETE
            >;
        };

        lower {
            bindings = <
&kp LG(LS(S))         &kp N1            &kp N2         &kp N3          &kp N4                &kp N5           &kp N6     &kp N7         &kp N8        &kp N9     &kp N0             &media_controls
&cs_lambda            &kp LEFT_BRACKET  &kp LESS_THAN  &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp SEMICOLON    &kp UNDER  &kp EQUAL      &kp QUESTION  &kp PIPE   &kp DOUBLE_QUOTES  &kp C_VOLUME_UP
&kp LG(LS(NUMBER_4))  &kp TILDE         &kp AT         &kp HASH        &kp DOLLAR            &kp PERCENT      &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp GRAVE  &shift_shift       &volume_controls
                                                       &none           &none                 &none            &mo 4      &mo 2          &kp DELETE
            >;

            label = "lower";
        };

        raise {
            bindings = <
&trans  &trans             &zellij_toggle_floating_pane  &trans                &kp LS(LA(LC(LG(R))))  &zellij_new_tab    &trans     &kp LS(LA(LC(LG(F))))  &kp LS(LA(LC(LG(C))))  &trans         &trans     &trans
&trans  &kp RIGHT_BRACKET  &kp GREATER_THAN              &kp RIGHT_BRACE       &kp RIGHT_PARENTHESIS  &kp COLON          &kp MINUS  &kp PLUS               &kp EXCLAMATION        &kp BACKSLASH  &kp SQT    &trans
&trans  &trans             &trans                        &zellij_previous_tab  &zellij_next_tab       &trans             &trans     &kp APOSTROPHE         &kp DOUBLE_QUOTES      &trans         &kp GRAVE  &trans
                                                         &trans                &trans                 &mo 4              &trans     &trans                 &trans
            >;

            label = "raise";
        };

        mgmt {
            bindings = <
&trans                &kp F1            &kp F2            &kp F3                &kp F4                &kp F5                   &kp F6    &kp F7    &kp F8  &kp F9     &kp F10             &kp F11
&kp LG(LEFT_BRACKET)  &kp LC(NUMBER_1)  &kp LC(NUMBER_2)  &kp LC(N3)            &kp LC(N4)            &kp LC(LA(LS(LG(G))))    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans              &kp F12
&trans                &kp LA(LS(N1))    &kp LS(LA(N2))    &kp LS(LA(NUMBER_3))  &kp LS(LA(NUMBER_4))  &trans                   &trans    &trans    &trans  &trans     &kp LC(LS(ESCAPE))  &kp LC(LA(DELETE))
                                                          &trans                &trans                &mo 2                    &trans    &trans    &trans
            >;

            label = "mgmt";
        };

        dual_layer {
            bindings = <
&none  &none         &none            &none       &none   &none     &none     &none          &none      &none    &none   &none
&none  &trans        &trans           &trans      &trans  &trans    &kp HOME  &kp PAGE_DOWN  &kp PG_UP  &kp END  &trans  &trans
&none  &kp C_VOL_DN  &kp C_VOLUME_UP  &kp K_MUTE  &trans  &trans    &trans    &trans         &trans     &trans   &trans  &trans
                                      &none       &trans  &none     &none     &none          &none
            >;

            label = "dual";
        };

        lhs {
            bindings = <
&kp C_VOLUME_UP  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_GUI  &kp LEFT_SHIFT  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&kp C_VOL_DN     &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&kp K_MUTE       &bt BT_CLR    &trans            &trans        &trans          &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                                 &trans        &trans          &trans          &trans  &trans  &trans
            >;

            label = "lhs";
        };

        num_pad {
            bindings = <
&kp LA(F4)  &trans  &trans  &trans  &trans  &trans    &trans  &kp N7           &kp N8  &kp N9  &kp PLUS   &kp EQUAL
&kp LG(Q)   &trans  &trans  &trans  &trans  &trans    &trans  &kp N4           &kp N5  &kp N6  &kp MINUS  &trans
&trans      &trans  &trans  &trans  &trans  &trans    &trans  &kp N1           &kp N2  &kp N3  &kp FSLH   &trans
                            &trans  &trans  &trans    &trans  &kp KP_NUMBER_0  &trans
            >;

            label = "num_pad";
        };
    };
};
